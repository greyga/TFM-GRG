# -*- coding: utf-8 -*-
"""filtroHPOR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z2pIUxKlnhHHacTI3e11X_UDVHZZjW-W
"""

## Carga del archivo de annovar y de genes to phenotype.txt
wannovar_df <- read.csv("/content/exomaBASE+Asthma+decreasedt4+increasedT4 - Copy.csv", header=TRUE)
   head(wannovar_df)

library(dplyr)
# Cambiar el nombre de la columna "AAChange.refGene" a "Transcript_exon_HGVSc._HGVSp."
colnames(wannovar_df)[which(colnames(wannovar_df) == "AAChange.refGene")] <- "Transcript_exon_HGVSc._HGVSp."

# Cambiar el nombre de la columna "Otherinfo" a "Zygosity" y cambiar los valores "het" a "heterozygous" y "hom" a "homozygous"
wannovar_df <- wannovar_df %>%
  mutate(Zygosity = ifelse(Otherinfo == "het", "heterozygous", ifelse(Otherinfo == "hom", "homozygous", NA))) %>%
  select(Gene.refGene, Zygosity, Transcript_exon_HGVSc._HGVSp., everything(), -Otherinfo)

#seleccionar columnas deseadas
subset_df <- subset(wannovar_df, select = c("Gene.refGene", "Zygosity", "Transcript_exon_HGVSc._HGVSp.", "dbSNP", "Chr", "Start", "End", "Ref", "Alt", "Func.refGene", "ExonicFunc.refGene", "X1000G_ALL", "X1000G_AFR", "X1000G_AMR", "X1000G_EAS", "X1000G_EUR", "X1000G_SAS", "ExAC_Freq", "ExAC_AFR", "ExAC_AMR", "ExAC_EAS", "ExAC_FIN", "ExAC_NFE", "ExAC_OTH", "ExAC_SAS", "ClinVar_SIG", "ClinVar_DIS", "GWAS_OR", "GWAS_BETA", "GWAS_PUBMED", "GWAS_SNP", "GWAS_P", "SIFT_score", "SIFT_converted_rankscore", "SIFT_pred", "Polyphen2_HDIV_score", "Polyphen2_HDIV_rankscore", "Polyphen2_HDIV_pred", "Polyphen2_HVAR_score", "Polyphen2_HVAR_rankscore", "Polyphen2_HVAR_pred", "LRT_score", "LRT_converted_rankscore", "LRT_pred", "MutationTaster_score", "MutationTaster_converted_rankscore", "MutationTaster_pred", "MutationAssessor_score", "MutationAssessor_score_rankscore", "MutationAssessor_pred", "FATHMM_score", "FATHMM_converted_rankscore", "FATHMM_pred", "CADD_raw_rankscore", "CADD_phred", "DANN_score", "DANN_rankscore", "GERP.._RS", "gnomAD_exome_ALL", "gnomAD_exome_AFR", "gnomAD_exome_AMR", "gnomAD_exome_ASJ", "gnomAD_exome_EAS", "gnomAD_exome_FIN", "gnomAD_exome_NFE", "gnomAD_exome_OTH", "gnomAD_exome_SAS", "gnomAD_genome_ALL", "gnomAD_genome_AFR", "gnomAD_genome_AMR", "gnomAD_genome_ASJ", "gnomAD_genome_EAS", "gnomAD_genome_FIN", "gnomAD_genome_NFE", "gnomAD_genome_OTH"))
subset_df

# Leer el archivo genes_to_phenotype.txt
genes_pheno <- read.delim("/content/genes_to_phenotype.txt", header=FALSE, comment.char="#")

# Seleccionar solo las columnas necesarias
genes_pheno_sub <- genes_pheno[, c("V2", "V3", "V4", "V9")]
genes_pheno_sub
# Renombrar las columnas
colnames(genes_pheno_sub) <- c("gene_id", "hpo_id", "hpo_desc", "omim_orpha")

# Combinar la información de hpo_id y hpo_desc en una sola columna separados por una coma
genes_pheno_sub$hpo <- paste(genes_pheno_sub$hpo_id, genes_pheno_sub$hpo_desc, sep = ", ")

# Eliminar las columnas hpo_id y hpo_name originales
genes_pheno_sub <- genes_pheno_sub[, !names(genes_pheno_sub) %in% c("hpo_id", "hpo_desc")]

# Agrupar por gene_id y concatenar los HPO y los códigos OMIM_OPRHA separados por ;
genes_pheno_aggr <- aggregate(cbind(hpo, omim_orpha) ~ gene_id, data = genes_pheno_sub, FUN = function(x) paste(x, collapse = "; "))

# Cambiar el nombre de la columna gene_symbol a Gene.refGene en la tabla de HPO
 colnames(genes_pheno_aggr)[1] <- "Gene.refGene"

## Realizar el merge
merged_df <- merge(subset_df, genes_pheno_aggr, by = "Gene.refGene", all.x = TRUE)
# Reemplazar los valores NA por "NO HPO" en merged_df
 if (anyNA(merged_df$hpo)) {
   merged_df$hpo[is.na(merged_df$hpo)] <- "NO HPO"}

# Reemplazar los valores NA por "NO OMIM_OPRHA" en merged_df
 if (anyNA(merged_df$omim_orpha)) {
   merged_df$omim_orpha[is.na(merged_df$omim_orpha)] <- "NO OMIM/OPRHA"}
merged_df

#ver tipo de las variables
str(merged_df)

#cambiar las columnas de las predicciones a caategorias

merged_df$SIFT_pred <- factor(merged_df$SIFT_pred, levels = c(".", "T", "D"), labels = c("Tolerated", "Damaging", "Deleterious"))
merged_df$Polyphen2_HDIV_pred <- factor(merged_df$Polyphen2_HDIV_pred, levels = c(".", "B", "D", "P"), labels = c("Benign", "Possibly damaging", "Probably damaging", "Damaging"))
merged_df$Polyphen2_HVAR_pred <- factor(merged_df$Polyphen2_HVAR_pred, levels = c(".", "B", "D", "P"), labels = c("Benign", "Possibly damaging", "Probably damaging", "Damaging"))
merged_df$MutationTaster_pred <- factor(merged_df$MutationTaster_pred, levels = c(".", "A", "D", "N", "P"), labels = c("Polymorphism", "Disease causing automatic", "Disease causing", "Polymorphism automatic", "Polymorphism"))
merged_df$MutationAssessor_pred <- factor(merged_df$MutationAssessor_pred, levels = c(".", "H", "M", "L", "N"), labels = c("Neutral", "High", "Medium", "Low", "Not provided"))
merged_df$FATHMM_pred <- factor(merged_df$FATHMM_pred, levels = c(".", "T", "D"), labels = c("Tolerated", "Damaging", "Deleterious"))
merged_df$ClinVar_SIG <- factor(merged_df$ClinVar_SIG, levels = c("Uncertain significance", "Benign", "Likely benign", "Likely pathogenic", "Pathogenic", "Drug response", "Histocompatibility", "Conflicting interpretations of pathogenicity"))

# cambiar frecuencias y scores as numeric
merged_df$X1000G_ALL <- as.numeric(merged_df$X1000G_ALL)
merged_df$X1000G_AFR <- as.numeric(merged_df$X1000G_AFR)
merged_df$X1000G_AMR <- as.numeric(merged_df$X1000G_AMR)
merged_df$X1000G_EAS <- as.numeric(merged_df$X1000G_EAS)
merged_df$X1000G_EUR <- as.numeric(merged_df$X1000G_EUR)
merged_df$X1000G_SAS <- as.numeric(merged_df$X1000G_SAS)
merged_df$ExAC_Freq <- as.numeric(merged_df$ExAC_Freq)
merged_df$ExAC_AFR <- as.numeric(merged_df$ExAC_AFR)
merged_df$ExAC_AMR <- as.numeric(merged_df$ExAC_AMR)
merged_df$ExAC_EAS <- as.numeric(merged_df$ExAC_EAS)
merged_df$ExAC_FIN <- as.numeric(merged_df$ExAC_FIN)
merged_df$ExAC_NFE <- as.numeric(merged_df$ExAC_NFE)
merged_df$ExAC_OTH <- as.numeric(merged_df$ExAC_OTH)
merged_df$ExAC_SAS <- as.numeric(merged_df$ExAC_SAS)
merged_df$GWAS_OR <- as.numeric(merged_df$GWAS_OR)
merged_df$GWAS_BETA <- as.numeric(merged_df$GWAS_BETA)
merged_df$GWAS_P <- as.numeric(merged_df$GWAS_P)
merged_df$SIFT_score <- as.numeric(merged_df$SIFT_score)
merged_df$SIFT_converted_rankscore <- as.numeric(merged_df$SIFT_converted_rankscore)
merged_df$Polyphen2_HDIV_score <- as.numeric(merged_df$Polyphen2_HDIV_score)
merged_df$Polyphen2_HDIV_rankscore <- as.numeric(merged_df$Polyphen2_HDIV_rankscore)
merged_df$Polyphen2_HVAR_score <- as.numeric(merged_df$Polyphen2_HVAR_score)
merged_df$Polyphen2_HVAR_rankscore <- as.numeric(merged_df$Polyphen2_HVAR_rankscore)
merged_df$LRT_score <- as.numeric(merged_df$LRT_score)
merged_df$LRT_converted_rankscore <- as.numeric(merged_df$LRT_converted_rankscore)
merged_df$MutationTaster_score <- as.numeric(merged_df$MutationTaster_score)
merged_df$MutationTaster_converted_rankscore <- as.numeric(merged_df$MutationTaster_converted_rankscore)
merged_df$MutationAssessor_score <- as.numeric(merged_df$MutationAssessor_score)
merged_df$MutationAssessor_score_rankscore <- as.numeric(merged_df$MutationAssessor_score_rankscore)
merged_df$FATHMM_score <- as.numeric(merged_df$FATHMM_score)
merged_df$FATHMM_converted_rankscore <- as.numeric(merged_df$FATHMM_converted_rankscore)
merged_df$CADD_raw_rankscore <- as.numeric(merged_df$CADD_raw_rankscore)
merged_df$CADD_phred <- as.numeric(merged_df$CADD_phred)
merged_df$GERP.._RS <- as.numeric(as.character(merged_df$GERP.._RS))
merged_df$gnomAD_exome_ALL <- as.numeric(as.character(merged_df$gnomAD_exome_ALL))
merged_df$gnomAD_exome_AFR <- as.numeric(as.character(merged_df$gnomAD_exome_AFR))
merged_df$gnomAD_exome_AMR <- as.numeric(as.character(merged_df$gnomAD_exome_AMR))
merged_df$gnomAD_exome_ASJ <- as.numeric(as.character(merged_df$gnomAD_exome_ASJ))
merged_df$gnomAD_exome_EAS <- as.numeric(as.character(merged_df$gnomAD_exome_EAS))
merged_df$gnomAD_exome_FIN <- as.numeric(as.character(merged_df$gnomAD_exome_FIN))
merged_df$gnomAD_exome_NFE <- as.numeric(as.character(merged_df$gnomAD_exome_NFE))
merged_df$gnomAD_exome_OTH <- as.numeric(as.character(merged_df$gnomAD_exome_OTH))
merged_df$gnomAD_exome_SAS <- as.numeric(as.character(merged_df$gnomAD_exome_SAS))
merged_df$gnomAD_genome_ALL <- as.numeric(as.character(merged_df$gnomAD_genome_ALL))
merged_df$gnomAD_genome_AFR <- as.numeric(as.character(merged_df$gnomAD_genome_AFR))
merged_df$gnomAD_genome_AMR <- as.numeric(as.character(merged_df$gnomAD_genome_AMR))
merged_df$gnomAD_genome_ASJ <- as.numeric(as.character(merged_df$gnomAD_genome_ASJ))
merged_df$gnomAD_genome_EAS <- as.numeric(as.character(merged_df$gnomAD_genome_EAS))
merged_df$gnomAD_genome_FIN <- as.numeric(as.character(merged_df$gnomAD_genome_FIN))
merged_df$gnomAD_genome_NFE <- as.numeric(as.character(merged_df$gnomAD_genome_NFE))
merged_df$gnomAD_genome_OTH <- as.numeric(as.character(merged_df$gnomAD_genome_OTH))

colnames(merged_df)
names(merged_df)

install.packages("stringr")
library(stringr)

# crear una función que extraiga los códigos HPO de una cadena de texto
extract_hpo <- function(x) {
  hpo_codes <- str_extract_all(x, "(HP:\\d+)")
  if (length(hpo_codes) > 0) {
    paste(hpo_codes[[1]], collapse = ", ")
  } else {
    ""
  }
}

# aplicar la función a la columna 'hpo' para crear una nueva columna 'HPO codes gene'
merged_df$`HPO codes gene` <- sapply(merged_df$hpo, extract_hpo)
head(merged_df)

#instalar y probar HPOSim
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
require(devtools)
install_github('cran/HPO.db')
library(HPO.db)
require(devtools)
install_github('cran/HPOSim')
library(HPOSim)
library(HPOSim)
#similitud semantica de Resnik entre dos términos
.initialize()
IC<-get("termIC", envir=HPOSimEnv)
calcTermSim("HP:0000028","HP:0000033", method = "Wang", IC, verbose = FALSE)
# similitud semnántica de Resnik entre un set de términos HPO
.initialize()
IC<-get("termIC",envir=HPOSimEnv)
getTermListSim(c("HP:0000006", "HP:00109709"),
c("HP:0004469","HP:0011949","HP:0030877","HP:0000083","HP:0011740","HP:0001949","HP:0011947","HP:0002097","HP:0002094","HP:0200117","HP:0001824","HP:0100812","HP:0003351","HP:0001942","HP:0001217","HP:0100749","HP:0031274","HP:0002900","HP:0000006","HP:0001047","HP:0005376","HP:0002153","HP:0000822","HP:0012092","HP:0040085","HP:0000848","HP:0012236","HP:0012735","HP:0002013","HP:0002637","HP:0008872","HP:0012378","HP:0004319","HP:0011675","HP:0002783","HP:0001531","HP:0001658","HP:0002110","HP:0200114","HP:0002902","HP:0001945","HP:0002105","HP:0003508","HP:0001324","HP:0030830","HP:0011110","HP:0000112","HP:0001081","HP:0004326","HP:0030828","HP:0002795","HP:0200039","HP:0001944","HP:0002019","HP:0002754","HP:0031245"),
combinemethod="mean", method="Resnik", IC=IC, verbose=FALSE)

# Cargar la biblioteca de HPOsim
library(HPOSim)

# Inicializar HPOsim
.initialize()

# Obtener el término IC de HPOsim
IC <- get("termIC", envir = HPOSimEnv)

# Definir la lista de códigos HPO de entrada
input_hpos <- c("HP:0002099")

# Definir una función para calcular la similitud semántica para cada fila del dataframe
get_hposim <- function(row) {
  # Obtener los códigos HPO de la columna "HPO codes gene" de la fila actual
  hpos <- unlist(strsplit(as.character(row["HPO codes gene"]), ", "))
  # Calcular la similitud semántica de Resnik entre los códigos HPO de entrada y los de la fila actual
  sim <- getTermListSim(hpos, input_hpos, combinemethod = "mean", method = "Lin", IC = IC, verbose = FALSE)
  return(sim)
}

# Aplicar la función a cada fila del dataframe y almacenar los resultados en una nueva columna
merged_df$HPOSIM <- apply(merged_df, 1, get_hposim)
merged_df$HPOSIM

#Definir los HPO de inputs
input_hpos <- c("HP:0002099")
# Definir una función para buscar una coincidencia entre los códigos HPO y el patrón de búsqueda
find_hpo_match <- function(row, input_hpos) {
  # Obtener los códigos HPO de la columna "HPO codes gene" de la fila actual
  hpos <- unlist(strsplit(as.character(row["HPO codes gene"]), ", "))
  # Buscar los códigos HPO que son comunes en la columna "HPO codes gene" y en la lista de códigos HPO de entrada
  common_hpos <- intersect(hpos, input_hpos)
  # Devolver una cadena de texto con los códigos HPO comunes separados por comas
  if (length(common_hpos) > 0) {
    return(paste(common_hpos, collapse = ","))
  } else {
    return("")
  }
}

# Aplicar la función a cada fila del dataframe y almacenar los resultados en una nueva columna
merged_df$HPOmatch <- apply(merged_df, 1, find_hpo_match, input_hpos = input_hpos)
head(merged_df)

# Leer el archivo genes_to_phenotype.txt
genes_pheno2 <- read.delim("/content/genes_to_phenotype.txt", header=FALSE, comment.char="#")

# Seleccionar solo las columnas necesarias
genes_pheno_sub2 <- genes_pheno2[, c("V2", "V3", "V4", "V9")]

# Renombrar las columnas
colnames(genes_pheno_sub2) <- c("gene_id", "hpo_id", "hpo_desc", "omim_orpha")

# Dividir la columna HPOmatch en filas
hpo_rows <- strsplit(as.character(merged_df$HPOmatch), ",")

# Crear un vector para almacenar las descripciones
desc_vec <- character(length(hpo_rows))

# Buscar la descripción de cada HPO code
for (i in seq_along(hpo_rows)) {
  # Filtrar la tabla para obtener solo las filas correspondientes a los HPOs en x
  filtered_table <- genes_pheno_sub2[genes_pheno_sub2$hpo_id %in% hpo_rows[[i]],]
  # Unir todas las descripciones en una sola cadena
  desc_string <- paste(unique(filtered_table$hpo_desc), collapse = ", ")
  # Almacenar la cadena en el vector de descripciones
  desc_vec[i] <- desc_string
}

# Agregar el vector de descripciones a la columna HPOmatch_desc del dataframe
merged_df$HPOmatch_desc <- desc_vec

#filtramos por los HPO de interés
input_hpo_codes <- c("HP:0002099")
filtered_df <- merged_df[apply(merged_df[, "HPO codes gene", drop=FALSE], 1, function(x) any(grepl(paste(input_hpo_codes, collapse="|"), x))), ]
#se transforma el archivo filtered_df en un archivo cvs
write.csv(filtered_df, "filtered_df.csv", row.names = FALSE)

# Suponiendo que tienes un DataFrame llamado filtered_df

# Seleccionar las columnas de interés
columnas_interes <- c("Gene.refGene", "Zygosity", "Transcript_exon_HGVSc._HGVSp.", "ExonicFunc.refGene", "HPOSIM", "HPOmatch", "HPOmatch_desc")
filtered_df_seleccionado <- filtered_df[columnas_interes]

# Filtrar las filas que no sean synonymous SNV en la columna ExonicFunc.refGene
filtered_df_filtrado <- filtered_df_seleccionado[filtered_df_seleccionado$ExonicFunc.refGene != "synonymous SNV", ]

# Ordenar la columna HPOSIM_Resnik de mayor a menor
filtered_df_filtrado <- filtered_df_filtrado[order(filtered_df_filtrado$HPOSIM, decreasing = TRUE), ]

# Mostrar el DataFrame filtrado y ordenado
filtered_df_filtrado